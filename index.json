[
{
	"uri": "/me/",
	"title": "me",
	"tags": [],
	"description": "",
	"content": " Chapter Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "/datascience/",
	"title": "Datascience",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "/cs/",
	"title": "Cs",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "/collections/",
	"title": "Collections",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "/cs/git_useful/",
	"title": "Useful Git commands",
	"tags": [],
	"description": "",
	"content": " Overview:\nThere are tons of tutorial of git. For those basic concepts, I am going to link to some good tutorial. This one is focusing on some real life use case. What if you encounter these errors or what if I want to do this\u0026hellip;\nUpdate a branch (feature) with different branch (develop) git checkout develop git pull git checkout feature git merge develop # or git rebase develop  The difference between with git rebase is that rebase keep all commits history from your branch, and that is important if your partial commits have a lot of content that can be interesting to keep. This option is obligatory in some teams.\nRemove grey submodule git rm --cached \u0026lt;folder_name\u0026gt; git add . git commit -m \u0026quot;\u0026lt;your_message\u0026gt;\u0026quot; git push --all  git merge TODO\nFix conflicts "
},
{
	"uri": "/cs/docker_useful/",
	"title": "Useful commands for docker",
	"tags": [],
	"description": "",
	"content": " References Top 10 Docker CLI commands you can\u0026rsquo;t live without\nLists running containers # show all containers docker ps -a # only list ids docker ps -q  Get base image from Docker Hub docker pull  Build docker images from a Dockerfile and a \u0026ldquo;context\u0026rdquo; docker build -t container_label .  Run a docker container based on an image Top 10 options for docker run\ndocker run my_image -it bash   --detach, -d --entrypoint --env, -e or --env-file --ip --name --publish, -p | --publish-all, -P --rm --tty, -t Command use with the option --interactive, -i --volume, -v --workdir, -w  Display the logs of a container docker logs --follow my_container  List the volumes, which are the preferred mechanism for persisting data generated by and used by Docker containers docker volume ls  Removes one or more containers docker rm my_container  Removes one or more images docker rmi my_image  Stops one or more containers docker stop my_container # docker kill my_container  Kill all running containers docker kill $(docker ps -q)  Delete all stopped containers docker rm $(docker ps -a -q)  Delete all images docker rmi $(docker images -q)  Update all images docker images |grep -v REPOSITORY|awk '{print $1}'|xargs -L1 docker pull  Enter a running docker container docker exec -it [container-id] bash  Copy file from docker container to host docker cp \u0026lt;containerId\u0026gt;:/file/path/within/container /host/path/target  List ports defined on a container docker port CONTAINER [Private_port[/protocol]] # Example $ docker port proxy 80/tcp -\u0026gt; 0.0.0.0:80 $ docker port proxy 80 0.0.0.0:80  A vs B Dokerfile EXPOSE vs publish EXPOSE:\nWhen writing your dockerfiles, the instruction EXPOSE tells Docker the running container listens on specific network ports.\nEXPOSE \u0026lt;port\u0026gt; [\u0026lt;port\u0026gt;/\u0026lt;protocol\u0026gt;...]  Or within docker run command:\ndocker run --expose=1234 my_container  Publish ports and map them to the host\nThere are several flags you can use when using the docker run command to publish a container\u0026rsquo;s ports outside of the container\u0026rsquo;s network and map them to the host machine\u0026rsquo;s ports.\ndocker run -p 80:80/tcp -p 80:80/udp my_app # To publish all the ports you define in your Dockerfile with EXPOSE and bind them to the host machine, you can use -P flag docker run -P my_app  "
},
{
	"uri": "/me/collections/",
	"title": "Collections",
	"tags": [],
	"description": "",
	"content": " Don\u0026rsquo;t do something you\u0026rsquo;ll lie to yourself later. Live in a matter you can bear to remember accurately.\nIt is fruitless to wish you had started years ago. In the future you will wish you had started now. Don\u0026rsquo;t wish. Act.\n\u0026ldquo;Why did this happen to me?\u0026rdquo; Why not? Events will never conform perfectly to your desires. Move forward.\n "
},
{
	"uri": "/",
	"title": "aboutme",
	"tags": [],
	"description": "",
	"content": " About Me and this site My name is Adenosine. And this is my site to record my learning and thinking process.\nI am using a star as my profile picture because star is some word play of my Chinese name.\n 4 years ago, I was a undergraduate student majored in the Plant Genetics. 2 years ago, I was a Applied Math and Statistics master student. And now, I am a data scientist and developer in Cloud Computing. And I found switching between different area is fantastic experience, and it also give me different perspectives to look at questions.\nAs a engineer, I always believe \u0026ldquo;quantity\u0026rdquo; is the only factor that make difference. When you stack up ideas and work, everything changes. Such as nucleic acid sequence, only needs A,C,G,T, it can generate billions of forms of life. And in the world of computer, 1 and 0 carry enormous information in a light speed.\n\u0026ldquo;How could I make difference?\u0026rdquo; I asked myself. That\u0026rsquo;s why I started publish my thinking and works on this site. My goal is update this site once a week at the beginning. When I am more familiar with english writing and get more time, I am going to update it more often.\nGoal for 2019 I am here -\u0026gt; semi-automation -\u0026gt; full automation -\u0026gt; Intelligence\nJPG (Javascript, Python, Go) developer.  Javascript : Learning how to build a website and other web knowleage. Python : My main language. Data Science + Machine Learning Go : For dev-ops and some tasks which require high performance.  Machine Learning practioner.  General Data Science: numpy, pandas, scipy Machine Learning : scikit-learn Deep Learning : Tensorflow, Pytorch Reinforcement Learning :  Dev-ops.  Linux Docker K8s Vim  Adenosine Feb 10th 2019\n"
},
{
	"uri": "/cs/10_basic_commands_for_linux_performance_detection/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " 10 basic commands for Linux performance detection 1. uptime uptime 20:25:38 up 7 min, 3 users, load average: 0.24, 0.45, 0.27 #该命令可以大致的看出计算机的整体负载情况，load average后的数字分别表示计算机在1min、5min、15min内的平均负载。  2. dmesg | tail dmesg | tail [ 51.424401] wlp5s0: RX AssocResp from 38:4c:90:8f:8c:85 (capab=0x831 status=0 aid=3) [ 51.426461] wlp5s0: associated [ 51.429463] ath: EEPROM regdomain: 0x8348 [ 51.429463] ath: EEPROM indicates we should expect a country code [ 51.429464] ath: doing EEPROM country-\u0026gt;regdmn map search [ 51.429465] ath: country maps to regdmn code: 0x3a [ 51.429465] ath: Country alpha2 being used: US [ 51.429466] ath: Regpair used: 0x3a [ 51.429466] ath: regdomain 0x8348 dynamically updated by country IE [ 51.679984] IPv6: ADDRCONF(NETDEV_CHANGE): wlp5s0: link becomes ready # 打印内核环形缓存区中的内容，可以用来查看一些错误；  3. vmstat 1 vmstat 1  4. mpstat -P ALL 1 "
},
{
	"uri": "/cs/cli_best_practice/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " CLI best practice reference\n[TOC]\n12 factors  Great help is essential Prefer flags to args What version am I on? Mind the streams Handle things going wrong Be fancy! Prompt if you can Use tables Be speedy Encourage contributions Be clear about subcommands Follow XDG-spec  "
},
{
	"uri": "/cs/readme/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Adenosine\u0026rsquo;s learning notes I am here -\u0026gt; semi-automation -\u0026gt; full automation -\u0026gt; Intelligence\nStructure JPG (Javascript, Python, Go) developer. - Javascript : Learning how to build a website and other web knowleage. - Python : My main language. Data Science + Machine Learning - Go : For dev-ops and some tasks which require high performance.\nMachine Learning practioner. - General Data Science: numpy, pandas, scipy - Machine Learning : scikit-learn - Deep Learning : Tensorflow, Pytorch - Reinforcement Learning :\nDev-ops. - Linux - Docker - K8s - Vim\nName Convention Based on my own usage, the most useful commands are store in the:\n- useful_*.md\nCourse notes, should start with the reference link to the course: - course_*.md\n"
},
{
	"uri": "/cs/raspberry_pi_3_nas/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Raspberry Pi 3 NAS [TOC]\nMount hard driver Create NAS Enable Time machine "
},
{
	"uri": "/cs/cli_improved/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Better cli tools Ignore alias \\cat # ignore aliases named \u0026quot;cat\u0026quot; - explanation: https://stackoverflow.com/a/16506263/22617 command cat # ignore functions and aliases  bat \u0026gt; cat bat\nComparing with cat, bat also offers highlighting, paging, line numbers and git integration.\nInstallation command:\nyaourt -S bat  prettyping \u0026gt; ping fzf \u0026gt; ctrl + r In addition to searching through the history, fzf can also preview and open files, which is what I\u0026rsquo;ve done in the video below:\nalias preview=\u0026quot;fzf --preview 'bat --color \\\u0026quot;always\\\u0026quot; {}'\u0026quot; # add support for ctrl+o to open selected file in VS Code export FZF_DEFAULT_OPTS=\u0026quot;--bind='ctrl-o:execute(code {})+abort'\u0026quot;  htop \u0026gt; top  P sort by CPU M sort by memory usage F4 filter processes by string (to narrow to just \u0026ldquo;node\u0026rdquo; for instance) space mark a single process so I can watch if the process is spiking  diff-so-fancy \u0026gt; diff fd \u0026gt; find tldr \u0026gt; man ack || ag \u0026gt; grep "
},
{
	"uri": "/cs/commands_for_data_scientist/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Command line tricks for data scientist [TOC]\nreference\nICONV HEAD TR WC SPLIT SORT \u0026amp; UNIQ CUT PASTE JOIN GREP  SED AWK  "
},
{
	"uri": "/cs/common_commands_useful/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Common Commands for linux File operations Compare two directory diff --brief -r dir1/ dir2/\nIf you want to see differences for files that may not exist in either directory diff --brief -Nr dir1/ dir2\n"
},
{
	"uri": "/cs/ssh_useful/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " SSH [TOC]\nreference1\nreference2\nGenerate a key ssh-keygen -t rsa -b 4096 -C \u0026quot;your_email@gmail.com\u0026quot;  Give a proper name for the key, or else, it would overwrite the id_rsa file\nAdd a key ssh-add -K ~/.ssh/id_rsa_my_key  For Mac, you need to add -k\n# Use the following command to check the result ssh-add -l  Config "
},
{
	"uri": "/cs/vim_useful/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Vim cheatsheet [toc]\nMove Faster Move to previous word (b) Move to end of line ($) Move to end of word (e) Move to beginning of line (0) Move down one line (j) Move left one character (h) Move to last line of screen (L) Move up one line (k) Move to middle line of screen (M) Move to first line of screen (H) Move right one character (l) Move to beginning of word (b) Move to next word (w)\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]